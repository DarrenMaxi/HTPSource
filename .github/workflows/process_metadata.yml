name: Process Metadata Update

on:
  issues:
    types: [labeled]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'The number of the issue to re-process with the latest workflow'
        required: true
        type: string

jobs:
  process-metadata-submission:
    if: (github.event.label.name == 'metadata-update' && github.event_name == 'issues') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Set Environment Variables
        id: set_env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "EVENT_TYPE=manual" >> $GITHUB_OUTPUT
            echo "ISSUE_NUMBER=${{ github.event.inputs.issue_number }}" >> $GITHUB_OUTPUT
          else
            echo "EVENT_TYPE=label" >> $GITHUB_OUTPUT
            echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
            echo "ISSUE_BODY_B64=$(echo '${{ github.event.issue.body }}' | base64 -w 0)" >> $GITHUB_OUTPUT
            echo "ISSUE_AUTHOR=${{ github.event.issue.user.login }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Get Issue Data for Manual Trigger
        id: issue_data
        if: steps.set_env.outputs.EVENT_TYPE == 'manual'
        uses: actions/github-script@v7
        with:
          script: |
            const response = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.set_env.outputs.ISSUE_NUMBER }}
            });
            if (response.status !== 200) {
              core.setFailed(`Failed to fetch issue #${issueNumber}. Status: ${response.status}`);
              return;
            }
            const issue = response.data;
            const body_b64 = Buffer.from(issue.body || '').toString('base64');
            core.setOutput('body_b64', body_b64);
            core.setOutput('author', issue.user.login);
            
      - name: Process metadata submission
        id: process
        env:
          ISSUE_NUMBER: ${{ steps.set_env.outputs.ISSUE_NUMBER }}
          ISSUE_AUTHOR: ${{ steps.set_env.outputs.EVENT_TYPE == 'manual' && steps.issue_data.outputs.author || steps.set_env.outputs.ISSUE_AUTHOR }}
          ISSUE_BODY: ${{ steps.set_env.outputs.EVENT_TYPE == 'manual' && steps.issue_data.outputs.body_b64 || steps.set_env.outputs.ISSUE_BODY_B64 }}
        run: |
          DECODED_BODY=$(echo "$ISSUE_BODY" | base64 --decode)
          export ISSUE_BODY="$DECODED_BODY"
          python .github/scripts/process_metadata.py

      - name: Create Pull Request for Metadata
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: ${{ steps.process.outputs.pr_title }}
          title: ${{ steps.process.outputs.pr_title }}
          body: ${{ steps.process.outputs.pr_body }}
          branch: ${{ steps.process.outputs.branch_name }}
          base: main # 或者你的主分支名称
          labels: metadata-update
          reviewers: ${{ env.ISSUE_AUTHOR }}

      - name: Comment on issue with PR link
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = `${{ steps.cpr.outputs.pull-request-number }}`;
            const issueNumber = ${{ steps.set_env.outputs.ISSUE_NUMBER }};
            const userLogin = `${{ env.ISSUE_AUTHOR }}`;
            let commentBody;
            if (prNumber) {
              commentBody = `你好 @${userLogin}！你的元数据更新请求已受理！:rocket:\n\n我们已经为你自动创建了一个 Pull Request，请在 #${prNumber} 中检查文件是否正确。`;
              if ("${{ github.event_name }}" === "workflow_dispatch") {
                commentBody = `你好 @${userLogin}，已使用最新的工作流对 Issue #${issueNumber} **重试成功**！:repeat:\n\n新的 Pull Request 在 #${prNumber}，请检查。`
              }
            } else {
               commentBody = `你好 @${userLogin}，机器人处理你的元数据提交时似乎遇到了一些问题。请检查上方 Action 的日志输出获取详细信息。`;
            }
            await github.rest.issues.createComment({
              issue_number: parseInt(issueNumber),
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });